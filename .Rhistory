devtools::load_all(".")
devtools::load_all(".")
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
variogram <- rbind(c(0, 1, 1, 1),
c(1, 0, 2, 2),
c(1, 2, 0, 2),
c(1, 2, 2, 0))
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?evir::gpd
?evd::fpot
?graphicalExtremes::rmpareto()
#' @param par Is the respective parameter for the given \code{model}.
#' Is one of:
#' \itemize{
#' \item \eqn{\theta \in (0, 1)}{0 < \theta < 1}, if \code{model = logistic}
#' \item \eqn{\theta > 0}, if \code{model = neglogistic}
#' \item \eqn{\alpha}, numeric vector of size \code{d}, if \code{model = dirichlet}
#' \item \eqn{\Gamma}, numeric matrix representing a \eqn{d \times d}{d x d} variogram,
#' if \code{model = HR}.
#' }
#' @return
rmpareto <- function(model, d, no.simu=1, par) {
stopifnot((d==round(d)) & (d>=1))
stopifnot((no.simu==round(no.simu)) & (no.simu>=1))
stopifnot(model %in% c("HR", "logistic", "neglogistic", "dirichlet"))
if (model=="HR") {
stopifnot(is.matrix(par))
Gamma = par
stopifnot(nrow(Gamma) == d & ncol(Gamma) == d)
cov.mat <- sapply(1:d, function(i) sapply(1:d, function(j)
(Gamma[i,1] + Gamma[j,1] - Gamma[i,j])/2))
cov.mat <- cov.mat + 1e-3 ##add constant random effect to avoid numerical problems
chol.mat <- chol(cov.mat)
} else if (model=="logistic") {
stopifnot(length(par) == 1 & 1e-12 < par & par < 1 - 1e-12)
theta = par
} else if (model=="neglogistic") {
stopifnot(par > 1e-12)
theta = par
} else if (model=="dirichlet") {
alpha = par
stopifnot(length(alpha) == d)
stopifnot(all(alpha>1e-12))
}
counter <- 0
res <- numeric(0)
n.total <- 0
while (n.total < no.simu){
counter <- counter + 1
shift <- sample(1:d, no.simu, replace=TRUE)
for(k in 1:d){
if (model == "HR") {
trend <- sapply(1:d, function(j) Gamma[j,k]/2)
}
n.k <- sum(shift==k)
if(n.k>0){
proc <- switch(model,
"HR"           = simu_px_HR(no.simu=n.k, idx=k, trend=trend, chol.mat=chol.mat),
"logistic"     = simu_px_logistic(no.simu=n.k, idx=k, N=d, theta=theta),
"neglogistic"  = simu_px_neglogistic(no.simu=n.k, idx=k, N=d, theta=theta),
"dirichlet"    = simu_px_dirichlet(no.simu=n.k, idx=k, N=d, alpha=alpha)
)
stopifnot(dim(proc)==c(n.k, d))
proc <- proc/rowSums(proc) / (1-runif(nrow(proc)))
idx.sim <- which(apply(proc,1,max) > 1)
res <- rbind(res, proc[idx.sim,])
n.total <- nrow(res)
}
}
}
return(list(res=res[sample(1:nrow(res), no.simu, replace=FALSE),], counter=counter))
}
rmpareto("HR", 3, par = variogram)
variogram
rmpareto("HR", 4, par = variogram)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 3)
rmpareto("HR", 4, par = variogram, no.simu = 1)
rmpareto("HR", 4, par = variogram, no.simu = 1)
rmpareto("HR", 4, par = variogram, no.simu = 1)
rmpareto("HR", 4, par = variogram, no.simu = 1)
rmpareto("HR", 4, par = variogram, no.simu = 1)
rmpareto("HR", 4, par = variogram, no.simu = 1)
sample(1:4, 10, replace = T)
rmpareto("HR", 3, par = variogram)
rmpareto("HR", 4, par = variogram)
rmpareto("HR", 4, par = variogram)
set.seed(1991)
rmpareto("HR", 4, par = variogram)
set.seed(1991)
debug(rmpareto)
rmpareto("HR", 4, par = variogram)
chol(cov.mat - 1e3)
shift
n.k
res
res
idx.sim
proc
apply(proc, 1, max)
shift
proc
proc
idx.sim
n.total
undebug(rmpareto)
rmpareto("HR", 4, no.simu = 43, par = variogram)
debug(rmpareto)
rmpareto("HR", 4, no.simu = 43, par = variogram)
shift
n.k
proc
n.k
d
proc
res
n.k
res
proc
res
res
shift
n.k
shift
n.total
no.simu
res
shift
n.k
idx.sim
res
n.k
res
no.simu
nrow(resetClass())
nrow(res)
sample(1:47, size = 43)
graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
?graphicalExtremes::rmpareto()
a = 2
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
library(graphicalExtremes)
devtools::load_all(".")
devtools::load_all(".")
library(igraph)
Gamma2Graph(G)
## 1. fully connected graph
G = cbind(c(0,2,2,2), c(2,0,2,2), c(2,2,0,2), c(2,2,2,0))
Gamma2Graph(G)
## 2. star-shaped graph
G = cbind(c(0,1,1,1), c(1,0,2,2), c(1,2,0,2), c(1,2,2,0))
Gamma2Graph(G)
## 3. Non-decomposable graph
G = cbind(c(0,1.5,1.5,2), c(1.5,0,2,1.5), c(1.5,2,0,1.5), c(2,1.5,1.5,0))
Gamma2Graph(G)
Gamma2Sigma(G)
Gamma2Sigma(G, full = T)
g
G
G
Gamma2Sigma(G, full = T)
?graphicalExtremes::rmpareto()
rmpareto(model = "HR", no.simu = 1, d = 3, par = G)
rmpareto(model = "HR", no.simu = 1, d = 4, par = G)
rmpareto(model = "logistic", no.simu = 1, d = 4, par = .4)
rmpareto(model = "logistic", no.simu = 1, d = 4, par = 1)
rmpareto(model = "logistic", no.simu = 1, d = 4, par = 0)
rmpareto(model = "neglogistic", no.simu = 1, d = 4, par = 0)
rmpareto(model = "neglogistic", no.simu = 1, d = 4, par = 1.3)
rmpareto(model = "neglogistic", no.simu = 1, d = 4, par = 1)
cov.mat <- Gamma2Sigma(Gamma, k=1, full=FALSE)
Gamma <- G
cov.mat <- Gamma2Sigma(Gamma, k=1, full=FALSE)
cov.mat
chol.mat <- matrix(0,d,d)
chol.mat
chol.mat <- matrix(0,d,d)
d <- 4
chol.mat
chol.mat[-1,-1] <- chol(cov.mat) ## add warning if cannot chol()
chol.mat
cov.mat <- Gamma2Sigma(Gamma, k=1, full=FALSE)
d
chol.mat <- matrix(0,d,d)
chol.mat
chol.mat[-1,-1] <- chol(cov.mat) ## add warning if cannot chol()
chol.mat
devtools::load_all(".")
#' variogram, if \code{model = HR}.
#' }
#' @return List. The list is made of:
#' \itemize{
#' \item \code{res} Numeric matrix of size \eqn{no.simu \times d}{no.simu x d}.
#' The simulated multivariate Pareto data.
#' \item \code{counter} Positive integer. The number of times needed to sweep
#' over the \code{d} variables to simulate \code{no.simul} multivariate
#' observations.
#' }
rmpareto <- function(model, d, no.simu=1, par) {
stopifnot((d==round(d)) & (d>=1))
stopifnot((no.simu==round(no.simu)) & (no.simu>=1))
stopifnot(model %in% c("HR", "logistic", "neglogistic", "dirichlet"))
if (model=="HR") {
stopifnot(is.matrix(par))
Gamma = par
stopifnot(nrow(Gamma) == d & ncol(Gamma) == d)
cov.mat <- Gamma2Sigma(Gamma, k=1, full=FALSE)
chol.mat <- matrix(0,d,d)
chol.mat[-1,-1] <- chol(cov.mat)
# !!! add error if cannot chol()
# !!! put here the trend and save it as a matrix (each row is one variable)
} else if (model=="logistic") {
stopifnot(length(par) == 1 & 1e-12 < par & par < 1 - 1e-12)
theta = par
} else if (model=="neglogistic") {
stopifnot(par > 1e-12)
theta = par
} else if (model=="dirichlet") {
alpha = par
stopifnot(length(alpha) == d)
stopifnot(all(alpha>1e-12))
}
counter <- 0
res <- numeric(0)
n.total <- 0
while (n.total < no.simu){
counter <- counter + 1
shift <- sample(1:d, no.simu, replace=TRUE)
for(k in 1:d){
if (model == "HR") {
trend <- sapply(1:d, function(j) Gamma[j,k]/2)
}
n.k <- sum(shift==k)
if(n.k>0){
proc <- switch(model,
"HR"           = simu_px_HR(no.simu=n.k, idx=k, trend=trend, chol.mat=chol.mat),
"logistic"     = simu_px_logistic(no.simu=n.k, idx=k, N=d, theta=theta),
"neglogistic"  = simu_px_neglogistic(no.simu=n.k, idx=k, N=d, theta=theta),
"dirichlet"    = simu_px_dirichlet(no.simu=n.k, idx=k, N=d, alpha=alpha)
)
stopifnot(dim(proc)==c(n.k, d))
proc <- proc/rowSums(proc) / (1-runif(nrow(proc)))
idx.sim <- which(apply(proc,1,max) > 1)
res <- rbind(res, proc[idx.sim,])
n.total <- nrow(res)
}
}
}
return(list(res=res[sample(1:nrow(res), no.simu, replace=FALSE),],
counter=counter))
}
rmpareto("hf")
rmpareto("hf", d = 1.2)
runif()
rnorm()
rnorm(
rnorm
runif
simu_px_tree_HR
simu_px_tree_HR
rexp(no.simu)
no.simu <- 1
poisson <- rexp(no.simu)
rexp(no.simu)
